10 REM ===========================================
15 REM AMIGA DEMOSCENE STYLE GRAPHICS DEMO
20 REM "RETRO WAVES" - A Visual Experience
22 REM with 3D Vector Graphics!
25 REM Created by the MCP
30 REM ===========================================

100 REM Konstanten
110 LET SCREENW = 640
120 LET SCREENH = 480
130 LET PI = 3.14159
140 LET CENTERX = SCREENW / 2
150 LET CENTERY = SCREENH / 2

200 REM Demo-Parameter
210 LET FRAME = 0
220 LET SPEED = 0.15
230 LET NUMSTARS = 50
240 LET NUMTUNNELRINGS = 12
250 LET PLASMASIZE = 32

300 REM 2D-Arrays für komplexe Effekte
310 REM STARS(ID, Eigenschaft): 0=X, 1=Y, 2=Z, 3=Speed
320 DIM STARS(49,3)
330 REM PLASMA(X,Y) für Plasma-Effekt
340 DIM PLASMA(31,23)

400 REM Intro-Screen
405 REM SID-Musik laden für die Demo
406 MUSIC OPEN "sensory.sid"
407 MUSIC PLAY
410 CLS
420 LOCATE 28, 8
430 PRINT "R E T R O   W A V E S"
440 LOCATE 26, 10
450 PRINT "========================"
460 LOCATE 25, 12
470 PRINT "Music by Toggle & c0zmo"
480 LOCATE 20, 20
490 PRINT "Press SPACE to start the experience"
500 LOCATE 25, 22
510 PRINT "ESC to exit anytime"

520 REM Intro-Effekt: Blinkende Punkte
530 FOR I = 1 TO 100
540   LET X = RND(SCREENW)
550   LET Y = RND(SCREENH)
560   LET C = RND(15) + 1
570   PLOT X, Y, C
580   IF I MOD 20 = 0 THEN WAIT 2
590 NEXT I

600 REM Warten auf Start
610 LET K$ = INKEY$
620 IF K$ = " " THEN GOTO 700
630 IF K$ = CHR$(27) THEN GOTO 9000
640 GOTO 610

700 REM Demo starten
705 REM Musik starten
706 MUSIC PLAY
710 CLS
720 GOSUB 1000
730 LET DEMOPART = 1
740 LET PARTFRAME = 0

800 REM Hauptdemo-Schleife
810 LET FRAME = FRAME + 1
820 LET PARTFRAME = PARTFRAME + 1

830 REM Demo-Part wechseln - verschiedene Längen für Parts
835 LET MAXFRAMES = 600
836 IF DEMOPART = 2 THEN LET MAXFRAMES = 30 
837 IF DEMOPART = 4 THEN LET MAXFRAMES = 100
838 IF DEMOPART = 5 THEN LET MAXFRAMES = 300
840 IF PARTFRAME > MAXFRAMES THEN GOSUB 8000

890 REM Demo-Part ausführen
900 IF DEMOPART = 1 THEN GOSUB 2000
910 IF DEMOPART = 2 THEN GOSUB 3000
920 IF DEMOPART = 3 THEN GOSUB 4000
930 IF DEMOPART = 4 THEN GOSUB 5000
935 IF DEMOPART = 5 THEN GOSUB 6000

940 REM Status anzeigen
950 LOCATE 2, 2
960 PRINT "PART "; DEMOPART; " FRAME "; PARTFRAME

970 REM Eingabe prüfen
980 LET K$ = INKEY$
990 IF K$ = CHR$(27) THEN GOTO 9000

995 REM Frame-Rate
997 WAIT 3
999 GOTO 810

1000 REM Initialisierung 
1010 REM Sterne für Starfield initialisieren
1015 FOR I = 0 TO NUMSTARS-1
1020   LET STARS(I,0) = (RND(2000) - 1000)
1025   LET STARS(I,1) = (RND(2000) - 1000)
1030   LET STARS(I,2) = RND(1000) + 100
1035   LET STARS(I,3) = RND(5) + 1
1040 NEXT I
1070 RETURN

2000 REM PART 1: 3D Starfield
2010 REM Starfield rendern
2020 FOR I = 0 TO NUMSTARS-1
2030   REM Stern bewegen
2040   LET STARS(I,2) = STARS(I,2) - STARS(I,3) * 2
2050   IF STARS(I,2) < 1 THEN GOSUB 2500
2100   
2110   REM 3D Projektion
2120   LET X = STARS(I,0) * 256 / STARS(I,2) + CENTERX
2130   LET Y = STARS(I,1) * 256 / STARS(I,2) + CENTERY
2140   LET BRIGHTNESS = 256 / STARS(I,2) * 15
2150   IF BRIGHTNESS > 15 THEN LET BRIGHTNESS = 15
2160   IF BRIGHTNESS < 1 THEN LET BRIGHTNESS = 1
2170   
2180   REM Stern zeichnen
2190   IF X >= 0 AND X < SCREENW AND Y >= 0 AND Y < SCREENH THEN PLOT X, Y, BRIGHTNESS
2200 NEXT I
2210 
2220 REM Tunnel-Effekt hinzufügen
2230 LET TIME = FRAME * SPEED
2240 FOR R = 1 TO NUMTUNNELRINGS
2250   LET RADIUS = R * 20 + SIN(TIME + R) * 10
2260   LET COLOR = (R + FRAME / 10) MOD 15 + 1
2270   CIRCLE CENTERX, CENTERY, RADIUS, COLOR, 0
2280 NEXT R
2290 RETURN

3000 REM PART 2: Plasma-Effekt
3010 LET TIME = FRAME * SPEED * 0.5
3020 FOR X = 0 TO 31
3030   FOR Y = 0 TO 23
3040     REM Plasma-Berechnung mit mehreren Sinuswellen
3050     LET V1 = SIN(X * 0.3 + TIME)
3060     LET V2 = SIN(Y * 0.2 + TIME * 1.2)
3070     LET V3 = SIN((X + Y) * 0.2 + TIME * 0.8)
3080     LET V4 = SIN(SQR(X*X + Y*Y) * 0.4 + TIME * 1.5)
3090     LET PLASMA(X,Y) = (V1 + V2 + V3 + V4) * 4
3100   NEXT Y
3110 NEXT X
3120 
3130 REM Plasma rendern
3140 FOR X = 0 TO 31
3150   FOR Y = 0 TO 23
3160     LET VAL = PLASMA(X,Y) + 32
3170     LET COLOR = (VAL / 4) MOD 15 + 1
3180     LET SIZE = VAL / 8 + 3
3190     IF SIZE > 10 THEN LET SIZE = 10
3200     LET SCREENX = X * 20
3210     LET SCREENY = Y * 20
3220     CIRCLE SCREENX, SCREENY, SIZE, COLOR, 1
3230   NEXT Y
3240 NEXT X
3250 RETURN

4000 REM PART 3: Rotating Squares
4020 LET TIME = FRAME * SPEED
4030 FOR I = 0 TO 8
4040   LET ANGLE = TIME + I * 0.5
4050   LET RADIUS = 100 + I * 20
4060   LET X = CENTERX + COS(ANGLE) * RADIUS
4070   LET Y = CENTERY + SIN(ANGLE) * RADIUS
4080   LET SIZE = 30 + SIN(TIME * 2 + I) * 15
4090   LET COLOR = (I * 2 + FRAME / 8) MOD 15 + 1
4100   
4110   REM Rotierendes Rechteck
4120   LET CX = COS(ANGLE * 3) * SIZE / 2
4130   LET CY = SIN(ANGLE * 3) * SIZE / 2
4140   
4150   REM Vier Eckpunkte berechnen und verbinden
4160   LINE X-CX, Y-CY, X+CY, Y-CX, COLOR
4170   LINE X+CY, Y-CX, X+CX, Y+CY, COLOR
4180   LINE X+CX, Y+CY, X-CY, Y+CX, COLOR
4190   LINE X-CY, Y+CX, X-CX, Y-CY, COLOR
4200 NEXT I
4210 
4220 REM Zentrale Spirale
4230 FOR A = 0 TO 100
4240   LET ANGLE = A * 0.3 + TIME * 2
4250   LET R = A * 2
4260   LET X1 = CENTERX + COS(ANGLE) * R
4270   LET Y1 = CENTERY + SIN(ANGLE) * R
4280   LET COLOR = (A / 10) MOD 15 + 1
4290   PLOT X1, Y1, COLOR
4300 NEXT A
4310 RETURN

5000 REM PART 4: Wave Distortion
5030 LET TIME = FRAME * SPEED
5040 FOR Y = 0 TO SCREENH STEP 4
5050   LET WAVE = SIN(Y * 0.05 + TIME) * 50
5060   LET WAVE2 = COS(Y * 0.03 + TIME * 1.3) * 30
5070   LET TOTALWAVE = WAVE + WAVE2
5080   
5090   REM Horizontale Wellenlinien
5100   LET COLOR = ((Y / 20) + FRAME / 15) MOD 15 + 1
5110   LINE 0, Y, SCREENW + TOTALWAVE, Y, COLOR
5120   
5130   REM Vertikale Interferenz
5140   IF Y MOD 20 = 0 THEN GOSUB 5500
5200 NEXT Y
5210 
5220 REM Zentrale Mandala
5230 FOR I = 0 TO 36
5240   LET ANGLE = I * PI / 18 + TIME
5250   LET R1 = 80 + SIN(ANGLE * 3 + TIME) * 30
5260   LET R2 = 120 + COS(ANGLE * 2 + TIME) * 40
5270   LET X1 = CENTERX + COS(ANGLE) * R1
5280   LET Y1 = CENTERY + SIN(ANGLE) * R1
5290   LET X2 = CENTERX + COS(ANGLE) * R2
5300   LET Y2 = CENTERY + SIN(ANGLE) * R2
5310   LET COLOR = (I / 3) MOD 15 + 1
5320   LINE X1, Y1, X2, Y2, COLOR
5330 NEXT I
5340 RETURN

6000 REM PART 4: 3D Vector Objects - "COSMIC DANCE"
6010 LET TIME = FRAME * SPEED
6020 LET VECTIME = TIME * 0.3
6030 
6000 REM PART 4: 3D Vector Objects - "COSMIC DANCE"
6010 LET TIME = FRAME * SPEED
6020 LET VECTIME = TIME * 0.3
6030 
6035 REM 3D Vector Starfield background
6040 FOR S = 200 TO 230
6045   LET STAR_Z = -15 - (S - 200) * 2 + (VECTIME * 0.8) MOD 60
6050   IF STAR_Z > -2 THEN LET STAR_Z = STAR_Z - 60
6055   LET STAR_X = ((S - 200) MOD 7 - 3) * 4 + SIN(S + VECTIME * 0.3) * 2
6060   LET STAR_Y = ((S - 200) / 7 - 2) * 3 + COS(S + VECTIME * 0.2) * 1.5
6065   LET STAR_SCALE = 0.1 + (STAR_Z + 15) * 0.02
6070   LET STAR_BRIGHTNESS = 3 + (STAR_Z + 15) * 0.3
6075   IF STAR_BRIGHTNESS > 12 THEN LET STAR_BRIGHTNESS = 12
6080   IF STAR_BRIGHTNESS < 1 THEN LET STAR_BRIGHTNESS = 1
6085   VECTOR S, "sphere", STAR_X, STAR_Y, STAR_Z, 0, 0, 0, STAR_SCALE, STAR_BRIGHTNESS
6090 NEXT S
6095 
6100 REM Central rotating cube formation with trails
6110 FOR I = 0 TO 7
6120   LET ANGLE = I * PI / 4 + VECTIME * 0.5
6130   LET RADIUS = 4 + SIN(VECTIME * 0.8 + I) * 2
6140   LET X = COS(ANGLE) * RADIUS
6150   LET Y = SIN(ANGLE) * RADIUS * 0.6
6160   LET Z = -5 + COS(VECTIME * 0.3 + I) * 2
6170   LET ROTX = VECTIME * 15 + I * 45
6180   LET ROTY = VECTIME * 20 + I * 30
6190   LET ROTZ = VECTIME * 10 + I * 15
6200   LET SCALE = 1.2 + SIN(VECTIME * 0.6 + I) * 0.4
6210   LET BRIGHTNESS = 8 + SIN(VECTIME * 0.4 + I) * 6
6220   IF BRIGHTNESS < 2 THEN LET BRIGHTNESS = 2
6230   IF BRIGHTNESS > 15 THEN LET BRIGHTNESS = 15
6240   
6245   REM Main cube
6250   VECTOR I, "cube", X, Y, Z, ROTX, ROTY, ROTZ, SCALE, BRIGHTNESS
6255   
6260   REM Trail cubes (3 positions behind)
6270   FOR T = 1 TO 3
6280     LET TRAIL_ANGLE = I * PI / 4 + (VECTIME - T * 0.15) * 0.5
6290     LET TRAIL_RADIUS = 4 + SIN((VECTIME - T * 0.15) * 0.8 + I) * 2
6300     LET TRAIL_X = COS(TRAIL_ANGLE) * TRAIL_RADIUS
6310     LET TRAIL_Y = SIN(TRAIL_ANGLE) * TRAIL_RADIUS * 0.6
6320     LET TRAIL_Z = -5 + COS((VECTIME - T * 0.15) * 0.3 + I) * 2
6330     LET TRAIL_SCALE = SCALE * (1 - T * 0.2)
6340     LET TRAIL_BRIGHTNESS = BRIGHTNESS * (1 - T * 0.3)
6350     IF TRAIL_BRIGHTNESS < 1 THEN LET TRAIL_BRIGHTNESS = 1
6360     LET TRAIL_ID = 30 + I * 3 + T - 1
6370     VECTOR TRAIL_ID, "cube", TRAIL_X, TRAIL_Y, TRAIL_Z, ROTX, ROTY, ROTZ, TRAIL_SCALE, TRAIL_BRIGHTNESS
6380   NEXT T
6390 NEXT I
6200 
6400 
6410 REM Pyramid sentinels at corners
6420 FOR I = 8 TO 11
6430   LET CORNER = I - 8
6440   LET X = (CORNER MOD 2) * 8 - 4
6450   LET Y = (CORNER / 2) * 6 - 3
6460   LET Z = -7 + SIN(VECTIME * 0.4 + CORNER * 1.5) * 1.5
6470   LET ROTY = VECTIME * 8 + CORNER * 90
6480   LET SCALE = 1.5 + COS(VECTIME * 0.3 + CORNER) * 0.3
6490   LET BRIGHTNESS = 12 + SIN(VECTIME * 0.7 + CORNER) * 3
6500   IF BRIGHTNESS > 15 THEN LET BRIGHTNESS = 15
6510   VECTOR I, "pyramid", X, Y, Z, 0, ROTY, 0, SCALE, BRIGHTNESS
6520 NEXT I
6530 
6540 REM Orbiting spheres - classic demoscene style
6550 FOR I = 12 TO 19
6560   LET SPHEREID = I - 12
6570   LET ORBIT_ANGLE = SPHEREID * PI / 4 + VECTIME * 0.4
6580   LET ORBIT_RADIUS = 6 + SIN(VECTIME * 0.2) * 1.5
6590   LET X = COS(ORBIT_ANGLE) * ORBIT_RADIUS
6600   LET Y = SIN(ORBIT_ANGLE) * ORBIT_RADIUS * 0.3
6610   LET Z = -4 + SIN(VECTIME * 0.6 + SPHEREID) * 2
6620   LET SCALE = 0.6 + SIN(VECTIME * 0.9 + SPHEREID) * 0.2
6630   LET BRIGHTNESS = 10 + SIN(VECTIME * 0.5 + SPHEREID) * 5
6640   IF BRIGHTNESS < 3 THEN LET BRIGHTNESS = 3
6650   IF BRIGHTNESS > 15 THEN LET BRIGHTNESS = 15
6660   VECTOR I, "sphere", X, Y, Z, 0, 0, 0, SCALE, BRIGHTNESS
6670 NEXT I
6680 
6690 REM Morphing central object - shape changes over time
6700 LET MORPH_CYCLE = SIN(TIME * 0.05) + 1
6710 IF MORPH_CYCLE < 0.7 THEN LET SHAPE$ = "cube"
6720 IF MORPH_CYCLE >= 0.7 AND MORPH_CYCLE < 1.3 THEN LET SHAPE$ = "sphere"
6730 IF MORPH_CYCLE >= 1.3 THEN LET SHAPE$ = "pyramid"
6740 LET SCALE = 2.5 + SIN(VECTIME * 0.7) * 0.8
6750 LET ROTX = VECTIME * 12
6760 LET ROTY = VECTIME * 8
6770 LET ROTZ = VECTIME * 15
6780 LET BRIGHTNESS = 15
6790 VECTOR 20, SHAPE$, 0, 0, -3, ROTX, ROTY, ROTZ, SCALE, BRIGHTNESS
6800 
6810 REM Clean up unused objects (hide objects 100-150)
6820 FOR I = 100 TO 150
6830   VECTOR.HIDE I
6840 NEXT I
6850 
6860 RETURN

8000 REM Part-Switching Subroutine
8005 REM Musik für verschiedene Parts wechseln
8010 REM IF DEMOPART = 1 THEN MUSIC OPEN "part2-plasma.sid"
8015 REM IF DEMOPART = 2 THEN MUSIC OPEN "part3-squares.sid"
8020 LET DEMOPART = DEMOPART + 1
8030 LET PARTFRAME = 0
8040 IF DEMOPART > 5 THEN LET DEMOPART = 1
8045 REM IF DEMOPART = 1 THEN MUSIC OPEN "retrowaves-demo.sid"
8050 REM MUSIC PLAY - Musik läuft bereits weiter
8060 CLS
8070 RETURN

9000 REM Demo Ende
9005 REM Musik stoppen
9006 MUSIC STOP
9010 CLS
9020 LOCATE 25, 10
9030 PRINT "T H A N K S   F O R   W A T C H I N G"
9040 LOCATE 30, 15
9050 PRINT "R E T R O   W A V E S"
9060 LOCATE 28, 20
9070 PRINT "BASIC DEMOSCENE 1985"
9080 
9090 REM Abschluss-Effekt
9100 FOR I = 1 TO 200
9110   LET X = RND(SCREENW)
9120   LET Y = RND(SCREENH)
9130   LET C = RND(15) + 1
9140   PLOT X, Y, C
9150   IF I MOD 10 = 0 THEN WAIT 1
9160 NEXT I
9170 
9180 WAIT 100
9185 REM Musik stoppen bei Programmende
9186 MUSIC STOP
9190 END

REM Subroutinen
2500 REM Stern neu platzieren
2510   LET STARS(I,0) = (RND(2000) - 1000)
2520   LET STARS(I,1) = (RND(2000) - 1000)
2530   LET STARS(I,2) = 1000
2540 RETURN

5500 REM Vertikale Interferenz
5510   FOR X = 0 TO SCREENW STEP 8
5520     LET VWAVE = SIN(X * 0.1 + TIME * 2) * 20
5530     LINE X, Y - VWAVE, X, Y + VWAVE, COLOR
5540   NEXT X
5550 RETURN