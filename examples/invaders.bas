10 REM Spiel-Konstanten
15 LET SCORE = 0
20 LET SCREENW = 640
30 LET SCREENH = 480
40 LET INVADERROWS = 5
50 LET INVADERCOLS = 11
60 LET MAXBULLETS = 1
70 LET MAXENEMYBULLETS = 3
80 LET MAXWALLS = 4
90 LET WALLBLOCKS = 20

100 REM Initialisierung mit 2D-Arrays
105 REM 2D-Arrays dimensionieren
106 REM INVADERS(ID, Eigenschaft): 0=X, 1=Y, 2=Alive, 3=Type, 4=Points
107 DIM INVADERS(55,4)
108 REM EBULLETS(ID, Eigenschaft): 0=X, 1=Y, 2=Active
109 DIM EBULLETS(3,2)
110 REM WALLS(ID, Eigenschaft): 0=X, 1=Y, 2=Active
111 DIM WALLS(80,2)
115 IMAGE OPEN "tiny.png", 1
120 CLS
130 MUSIC OPEN "deep.sid"
135 MUSIC PLAY
140 REM Titel-Screen
150 LOCATE 30, 10
160 PRINT "SPACE INVADERS"
170 LOCATE 25, 15
180 PRINT "Press SPACE to start"
190 LOCATE 20, 20
200 PRINT "Arrow keys to move, SPACE to fire"
210 SAY "Welcome to Space Invaders"
220 SOUND 440, 500
230 NOISE 50, 20, 30

240 REM Warten auf Tastendruck
250 LET K$ = INKEY$
260 IF K$ = " " THEN GOTO 300
270 IF K$ = CHR$(27) THEN GOTO 11200
280 GOTO 240

300 REM Spiel initialisieren
305 CLS
306 IMAGE SHOW 1,120,80,-2
310 GOSUB 8000
320 GOSUB 7000
325 GOSUB 6040
328 GOSUB 9000
329 GOSUB 12000
330 IMAGE HIDE 1
340 REM Hauptspielschleife
341 REM Kein CLS
342 REM Eingabe verarbeiten
343 LET K$ = INKEY$
344 IF K$ = KEYCURLEFT THEN GOSUB 1000
345 IF K$ = KEYCURRIGHT THEN GOSUB 1100
346 IF K$ = KEYSPACE THEN GOSUB 1200
347 IF K$ = KEYESC THEN GOTO 11200

349 REM Spiellogik
350 GOSUB 2000
351 GOSUB 2100
352 GOSUB 2200
353 GOSUB 3000
354 GOSUB 4000
355 GOSUB 5000
356 GOSUB 12300

357 REM Zeichnen
358 GOSUB 7500

359 REM Status prüfen
360 GOSUB 8500

361 REM Nächster Frame
362 WAIT 1
363 GOTO 341

1000 REM Spieler nach links
1010 LET PLAYERX = PLAYERX - 8
1020 IF PLAYERX < 0 THEN LET PLAYERX = 0
1030 SOUND 200, 50
1040 RETURN

1100 REM Spieler nach rechts  
1110 LET PLAYERX = PLAYERX + 8
1120 IF PLAYERX > SCREENW - 32 THEN LET PLAYERX = SCREENW - 32
1130 SOUND 200, 50
1140 RETURN

1200 REM Schuss abfeuern
1210 IF BULLETACTIVE = 1 THEN RETURN
1220 LET BULLETX = PLAYERX
1230 LET BULLETY = PLAYERY
1240 LET BULLETACTIVE = 1
1250 SOUND 800, 100
1260 RETURN

2000 REM Player Bullet bewegen
2010 IF BULLETACTIVE = 0 THEN RETURN
2020 LET BULLETY = BULLETY - 12
2030 IF BULLETY < 0 THEN LET BULLETACTIVE = 0
2040 RETURN

2100 REM Enemy Bullets bewegen (2D-Array-Version)
2110 FOR I = 1 TO MAXENEMYBULLETS
2120   IF EBULLETS(I,2) <> 0 THEN LET EBULLETS(I,1) = EBULLETS(I,1) + 8
2130   IF EBULLETS(I,2) <> 0 AND EBULLETS(I,1) > SCREENH THEN LET EBULLETS(I,2) = 0
2180 NEXT I
2190 RETURN

2200 REM Enemy Bullets erstellen (2D-Array-Version)
2210 LET SHOOTCHANCE = INT(RND() * 100)
2220 IF SHOOTCHANCE > 3 THEN RETURN
2230 LET SHOOTER = INT(RND() * 55) + 1
2240 IF INVADERS(SHOOTER,2) = 0 THEN RETURN
2250 FOR I = 1 TO MAXENEMYBULLETS
2260   IF EBULLETS(I,2) = 0 THEN LET EBULLETS(I,0) = INVADERS(SHOOTER,0): LET EBULLETS(I,1) = INVADERS(SHOOTER,1) + 32: LET EBULLETS(I,2) = 1: SOUND 300, 80: RETURN
2320 NEXT I
2330 RETURN

3000 REM Aliens bewegen (2D-Array-Version)
3010 LET FRAMECOUNTER = FRAMECOUNTER + 1
3020 IF FRAMECOUNTER < ALIENMOVEDELAY THEN RETURN
3030 LET FRAMECOUNTER = 0

3040 REM Bewegungsrichtung prüfen
3050 LET HITEDGE = 0
3060 FOR I = 1 TO 55
3070   IF INVADERS(I,2) <> 0 THEN IF ALIENDIRECTION = 1 AND INVADERS(I,0) > SCREENW - 60 THEN LET HITEDGE = 1
3080   IF INVADERS(I,2) <> 0 THEN IF ALIENDIRECTION = -1 AND INVADERS(I,0) < 20 THEN LET HITEDGE = 1
3120 NEXT I

3130 REM Bewegung ausführen
3140 IF HITEDGE = 1 THEN GOTO 3210
3150 FOR I = 1 TO 55
3160   IF INVADERS(I,2) = 1 THEN LET INVADERS(I,0) = INVADERS(I,0) + ALIENDIRECTION * 16
3170 NEXT I
3180 SOUND 100 + ALIENSOUND * 50, 80
3190 LET ALIENSOUND = 1 - ALIENSOUND
3200 RETURN

3210 REM Nach unten bewegen
3220 LET ALIENDIRECTION = ALIENDIRECTION * -1
3230 FOR I = 1 TO 55
3240   IF INVADERS(I,2) = 1 THEN LET INVADERS(I,1) = INVADERS(I,1) + 24
3250 NEXT I
3260 SOUND 150, 200
3270 LET ALIENMOVEDELAY = ALIENMOVEDELAY - 2
3280 IF ALIENMOVEDELAY < 5 THEN LET ALIENMOVEDELAY = 5
3290 RETURN
4000 REM Mutterschiff-Logik
4010 LET UFOTIME = UFOTIME + 1
4020 IF UFOACTIVE = 0 THEN GOTO 4060
4030 LET UFOX = UFOX + 4
4040 IF UFOX > SCREENW + 50 THEN LET UFOACTIVE = 0
4050 RETURN

4060 REM UFO erscheinen lassen
4070 IF UFOTIME < 600 THEN RETURN
4080 LET UFOCHANCE = INT(RND() * 100)
4090 IF UFOCHANCE > 5 THEN RETURN
4100 LET UFOX = -60
4110 LET UFOY = 30
4120 LET UFOACTIVE = 1
4130 LET UFOTIME = 0
4140 SAY "Incoming U F O"
4150 NOISE 30, 15, 25
4160 RETURN

5000 REM Kollisionen prüfen
5010 GOSUB 5100
5020 GOSUB 5300
5030 GOSUB 5500
5040 GOSUB 5700
5045 GOSUB 5920
5050 RETURN

5100 REM Player Bullet vs Aliens (2D-Array-Version)
5110 IF BULLETACTIVE = 0 THEN RETURN
5120 FOR I = 1 TO 55
5130   IF INVADERS(I,2) <> 0 THEN IF BULLETX + 32 >= INVADERS(I,0) THEN IF BULLETX <= INVADERS(I,0) + 32 THEN IF BULLETY + 32 >= INVADERS(I,1) THEN IF BULLETY <= INVADERS(I,1) + 32 THEN GOSUB 5200
5180 NEXT I
5190 RETURN

5200 REM Alien getroffen
5210 LET INVADERS(I,2) = 0
5220 LET BULLETACTIVE = 0
5230 LET SCORE = SCORE + INVADERS(I,4)
5240 LET ALIENCOUNT = ALIENCOUNT - 1
5245 REM Explosion mit Partikelsystem
5246 LET EXPX = INVADERS(I,0) + 16
5247 LET EXPY = INVADERS(I,1) + 16
5248 GOSUB 12100
5250 SOUND 1000, 150
5260 NOISE 15, 80, 85
5270 GOTO 5190
5280 RETURN

5300 REM Player Bullet vs UFO
5310 IF BULLETACTIVE = 0 THEN RETURN
5320 IF UFOACTIVE = 0 THEN RETURN
5330 IF BULLETX + 32 < UFOX THEN RETURN
5340 IF BULLETX > UFOX + 60 THEN RETURN
5350 IF BULLETY + 32 < UFOY THEN RETURN
5360 IF BULLETY > UFOY + 32 THEN RETURN
5370 LET UFOACTIVE = 0
5380 LET BULLETACTIVE = 0
5390 LET SCORE = SCORE + 300
5395 REM UFO Explosion
5396 LET EXPX = UFOX + 30
5397 LET EXPY = UFOY + 16
5398 GOSUB 12200
5400 SOUND 1500, 300
5410 SAY "Bonus three hundred points"
5420 RETURN

5500 REM Player Bullet vs Walls (2D-Array-Version)
5510 IF BULLETACTIVE = 0 THEN RETURN
5520 FOR W = 1 TO MAXWALLS
5530   FOR B = 1 TO WALLBLOCKS
5540     LET IDX = (W - 1) * WALLBLOCKS + B
5541     IF WALLS(IDX,2) <> 0 THEN IF BULLETX + 32 >= WALLS(IDX,0) AND BULLETX <= WALLS(IDX,0) + 8 THEN GOSUB 5610
5580   NEXT B
5590 NEXT W
5600 RETURN

5610 REM Wand-Block getroffen
5620 LET IDX = (W - 1) * WALLBLOCKS + B
5621 IF BULLETY + 32 >= WALLS(IDX,1) AND BULLETY <= WALLS(IDX,1) + 8 THEN GOTO 5640
5630 RETURN
5640 LET WALLS(IDX,2) = 0
5650 LET BULLETACTIVE = 0
5660 SOUND 400, 100
5670 GOTO 5600
5680 RETURN

5700 REM Enemy Bullets vs Player (2D-Array-Version)
5710 FOR I = 1 TO MAXENEMYBULLETS
5720   IF EBULLETS(I,2) <> 0 THEN IF EBULLETS(I,0) + 32 >= PLAYERX THEN IF EBULLETS(I,0) <= PLAYERX + 32 THEN IF EBULLETS(I,1) + 32 >= PLAYERY THEN IF EBULLETS(I,1) <= PLAYERY + 32 THEN GOSUB 5800
5780 NEXT I
5790 RETURN

5800 REM Spieler getroffen
5810 LET EBULLETS(I,2) = 0
5820 LET LIVES = LIVES - 1
5830 SOUND 200, 800
5840 SAY "Player hit"
5850 FOR FLASH = 1 TO 10
5860   NOISE 10, 5, 15
5870   FOR PAUSE = 1 TO 20
5880   NEXT PAUSE
5890 NEXT FLASH
5900 GOTO 5790
5910 RETURN

5920 REM Enemy Bullets vs Walls (2D-Array-Version)
5930 FOR I = 1 TO MAXENEMYBULLETS
5940   IF EBULLETS(I,2) <> 0 THEN FOR W = 1 TO MAXWALLS: FOR B = 1 TO WALLBLOCKS: LET IDX = (W - 1) * WALLBLOCKS + B: IF WALLS(IDX,2) <> 0 THEN IF EBULLETS(I,0) + 32 >= WALLS(IDX,0) AND EBULLETS(I,0) <= WALLS(IDX,0) + 8 THEN GOSUB 6010: NEXT B: NEXT W
6000 NEXT I
6005 RETURN

6010 REM Enemy Bullet trifft Wand-Block
6015 LET IDX = (W - 1) * WALLBLOCKS + B
6016 IF EBULLETS(I,1) + 32 >= WALLS(IDX,1) AND EBULLETS(I,1) <= WALLS(IDX,1) + 8 THEN GOTO 6018
6017 RETURN
6018 LET WALLS(IDX,2) = 0
6019 LET EBULLETS(I,2) = 0
6020 SOUND 350, 80
6021 GOTO 6005
6022 RETURN

6040 REM Wände initialisieren (2D-Array-Version)
6050 FOR W = 1 TO MAXWALLS
6060   LET BASEX = 80 + (W - 1) * 120
6070   LET BASEY = 380
6080   FOR ROW = 1 TO 4
6090     FOR COL = 1 TO 5
6100       LET BLOCKNUM = (ROW - 1) * 5 + COL
6110       LET IDX = (W - 1) * WALLBLOCKS + BLOCKNUM
6120       LET WALLS(IDX,0) = BASEX + COL * 8
6130       LET WALLS(IDX,1) = BASEY + ROW * 8
6140       LET WALLS(IDX,2) = 1
6150       IF ROW = 4 AND COL = 2 THEN LET WALLS(IDX,2) = 0
6160       IF ROW = 4 AND COL = 3 THEN LET WALLS(IDX,2) = 0
6170       IF ROW = 4 AND COL = 4 THEN LET WALLS(IDX,2) = 0
6180     NEXT COL
6190   NEXT ROW
6200 NEXT W
6210 RETURN

REM =============================================
REM ALIEN-INITIALISIERUNG
REM =============================================

7000 REM Aliens initialisieren (2D-Array-Version)
7010 LET INDEX = 0
7020 FOR ROW = 1 TO INVADERROWS
7030   FOR COL = 1 TO INVADERCOLS
7040     LET INDEX = INDEX + 1
7050     LET INVADERS(INDEX,0) = 30 + COL * 40
7060     LET INVADERS(INDEX,1) = 50 + ROW * 35
7070     LET INVADERS(INDEX,2) = 1
7080     IF ROW = 1 THEN LET INVADERS(INDEX,3) = 3
7090     IF ROW = 2 THEN LET INVADERS(INDEX,3) = 2
7100     IF ROW = 3 THEN LET INVADERS(INDEX,3) = 2
7110     IF ROW = 4 THEN LET INVADERS(INDEX,3) = 1
7120     IF ROW = 5 THEN LET INVADERS(INDEX,3) = 1
7130     IF ROW = 1 THEN LET INVADERS(INDEX,4) = 30
7140     IF ROW = 2 THEN LET INVADERS(INDEX,4) = 20
7150     IF ROW = 3 THEN LET INVADERS(INDEX,4) = 20
7160     IF ROW = 4 THEN LET INVADERS(INDEX,4) = 10
7170     IF ROW = 5 THEN LET INVADERS(INDEX,4) = 10
7180   NEXT COL
7190 NEXT ROW
7200 LET ALIENCOUNT = 55
7210 RETURN

REM =============================================
REM ZEICHNEN
REM =============================================

7500 REM Alles zeichnen
7510 REM Score anzeigen
7520 LOCATE 10, 1
7530 PRINT "SCORE: "; SCORE
7540 LOCATE 30, 1
7550 PRINT "LIVES: "; LIVES
7560 LOCATE 50, 1
7570 PRINT "LEVEL: "; LEVEL

7580 REM Spieler zeichnen
7590 SPRITE UPDATE 100, 4, PLAYERX, PLAYERY, 0, 1

7600 REM Aliens zeichnen (2D-Array-Version)
7610 FOR I = 1 TO 55
7620   IF INVADERS(I,2) = 1 THEN SPRITE UPDATE I, INVADERS(I,3), INVADERS(I,0), INVADERS(I,1), 0, 1
7625   IF INVADERS(I,2) = 0 THEN SPRITE UPDATE I, INVADERS(I,3), INVADERS(I,0), INVADERS(I,1), 0, 0
7630 NEXT I

7640 REM UFO zeichnen
7650 IF UFOACTIVE = 1 THEN SPRITE UPDATE 101, 5, UFOX, UFOY, 0, 1
7655 IF UFOACTIVE = 0 THEN SPRITE UPDATE 101, 5, -200, -200, 0, 0

7660 REM Player Bullet zeichnen
7670 IF BULLETACTIVE = 1 THEN SPRITE UPDATE 200, 6, BULLETX, BULLETY, 0, 1
7672 IF BULLETACTIVE = 0 THEN SPRITE UPDATE 200, 6, -100, -100, 0, 0

7680 REM Enemy Bullets zeichnen (2D-Array-Version)
7690 FOR I = 1 TO MAXENEMYBULLETS
7700   IF EBULLETS(I,2) = 1 THEN SPRITE UPDATE 210 + I, 7, EBULLETS(I,0), EBULLETS(I,1), 0, 1
7705   IF EBULLETS(I,2) = 0 THEN SPRITE UPDATE 210 + I, 7, -100, -100, 0, 0
7710 NEXT I

7720 REM Wände zeichnen (2D-Array-Version)
7730 FOR W = 1 TO MAXWALLS
7740   FOR B = 1 TO WALLBLOCKS
7750     LET IDX = (W - 1) * WALLBLOCKS + B
7760     IF WALLS(IDX,2) = 1 THEN SPRITE UPDATE 100 + IDX, 8, WALLS(IDX,0), WALLS(IDX,1), 0, 1
7770     IF WALLS(IDX,2) = 0 THEN SPRITE UPDATE 100 + IDX, 8, WALLS(IDX,0), WALLS(IDX,1), 0, 0
7780   NEXT B
7790 NEXT W

7800 RETURN

REM =============================================
REM SPIEL-ZUSTAND
REM =============================================

8000 REM Variablen initialisieren
8010 LET PLAYERX = 300
8020 LET PLAYERY = 440
8030 LET BULLETACTIVE = 0
8032 LET BULLETX = -100
8034 LET BULLETY = -100
8040 LET SCORE = 0
8050 LET LIVES = 3
8060 LET LEVEL = 1
8070 LET ALIENCOUNT = 55
8080 LET ALIENDIRECTION = 1
8090 LET ALIENMOVEDELAY = 30
8100 LET ALIENSOUND = 0
8110 LET FRAMECOUNTER = 0
8120 LET UFOACTIVE = 0
8125 LET UFOX = -100
8127 LET UFOY = -100
8130 LET UFOTIME = 0
8140 FOR I = 1 TO MAXENEMYBULLETS
8150   LET EBULLETS(I,2) = 0
8155   LET EBULLETS(I,0) = -100
8157   LET EBULLETS(I,1) = -100
8160 NEXT I
8165 REM Explosion Timer Variablen (erweitert für 6 Emitter)
8166 LET EXP1TIME = 0
8167 LET EXP2TIME = 0
8168 LET EXP3TIME = 0
8169 LET EXP4TIME = 0
8170 LET EXP5TIME = 0
8171 LET EXP6TIME = 0
8172 RETURN

8500 REM Spiel-Status prüfen
8510 REM Game Over
8520 IF LIVES <= 0 THEN GOTO 11000
8530 REM Aliens erreichen Spieler
8540 FOR I = 1 TO 55
8550   IF INVADERS(I,2) = 1 AND INVADERS(I,1) > 420 THEN GOTO 11000
8560 NEXT I
8570 REM Level Complete
8580 IF ALIENCOUNT <= 0 THEN GOTO 8600
8590 RETURN

8600 REM Nächstes Level
8610 LET LEVEL = LEVEL + 1
8620 LET ALIENMOVEDELAY = ALIENMOVEDELAY - 3
8630 IF ALIENMOVEDELAY < 8 THEN LET ALIENMOVEDELAY = 8
8640 GOSUB 7000
8650 GOSUB 6040
8660 SAY "Level " + STR$(LEVEL) + " complete"
8670 SOUND 2000, 500
8680 FOR I = 1 TO 100
8690   NOISE 5, 10, 20
8700 NEXT I
8710 RETURN

REM =============================================
REM SPRITE-DEFINITIONEN
REM =============================================

9000 REM Sprite-Definitionen laden
9010 GOSUB 9110
9020 GOSUB 9350
9030 GOSUB 9670
9040 GOSUB 9920
9050 GOSUB 10160
9060 GOSUB 10400
9070 GOSUB 10530
9080 GOSUB 10780
9090 RETURN

9100 REM Sprite 1: Krabbe-Alien (32x32) - Authentisches Design
9110 LET S$ = ""
9120 FOR J = 1 TO 1024
9130   LET Y = INT((J - 1) / 32) + 1
9140   LET X = ((J - 1) MOD 32) + 1
9150   LET P = 0
9160   REM Krabbe Körper
9170   IF Y = 11 AND X >= 12 AND X <= 20 THEN LET P = 15
9180   IF Y = 12 AND X >= 10 AND X <= 22 THEN LET P = 15
9190   IF Y = 13 AND X >= 8 AND X <= 24 THEN LET P = 15
9200   IF Y = 14 AND X >= 7 AND X <= 25 THEN LET P = 15
9210   IF Y = 15 AND X >= 9 AND X <= 23 THEN LET P = 15
9220   REM Augen
9230   IF Y = 12 AND ((X >= 12 AND X <= 13) OR (X >= 19 AND X <= 20)) THEN LET P = 0
9240   IF Y = 13 AND ((X >= 12 AND X <= 13) OR (X >= 19 AND X <= 20)) THEN LET P = 0
9250   REM Klauen/Beine
9260   IF Y = 16 AND ((X >= 9 AND X <= 10) OR (X = 13) OR (X = 15) OR (X = 17) OR (X = 19) OR (X >= 22 AND X <= 23)) THEN LET P = 15
9270   IF Y = 17 AND ((X = 8) OR (X = 11) OR (X = 14) OR (X = 18) OR (X = 21) OR (X = 24)) THEN LET P = 15
9280   IF Y = 18 AND ((X >= 9 AND X <= 10) OR (X >= 22 AND X <= 23)) THEN LET P = 15
9290   IF J > 1 THEN LET S$ = S$ + ","
9300   LET S$ = S$ + STR$(P)
9310 NEXT J
9320 SPRITE 1, S$
9330 RETURN

9340 REM Sprite 2: Quallen-Alien (32x32) - Authentisches Design
9350 LET S$ = ""
9360 FOR K = 1 TO 1024
9370   LET Y = INT((K - 1) / 32) + 1
9380   LET X = ((K - 1) MOD 32) + 1
9390   LET P = 0
9400   REM Quallen-Körper
9410   IF Y = 10 AND X >= 13 AND X <= 19 THEN LET P = 14
9420   IF Y = 11 AND X >= 11 AND X <= 21 THEN LET P = 14
9430   IF Y = 12 AND X >= 9 AND X <= 23 THEN LET P = 14
9440   IF Y = 13 AND X >= 8 AND X <= 24 THEN LET P = 14
9450   IF Y = 14 AND X >= 9 AND X <= 23 THEN LET P = 14
9460   IF Y = 15 AND X >= 11 AND X <= 21 THEN LET P = 14
9470   REM Augen
9480   IF Y = 12 AND ((X >= 12 AND X <= 13) OR (X >= 19 AND X <= 20)) THEN LET P = 0
9490   IF Y = 13 AND ((X >= 12 AND X <= 13) OR (X >= 19 AND X <= 20)) THEN LET P = 0
9500   REM Tentakel
9510   IF Y = 16 AND ((X = 10) OR (X = 13) OR (X = 16) OR (X = 19) OR (X = 22)) THEN LET P = 14
9520   IF Y = 17 AND ((X = 9) OR (X = 12) OR (X = 15) OR (X = 17) OR (X = 20) OR (X = 23)) THEN LET P = 14
9530   IF Y = 18 AND ((X = 11) OR (X = 14) OR (X = 18) OR (X = 21)) THEN LET P = 14
9540   IF K > 1 THEN LET S$ = S$ + ","
9550   LET S$ = S$ + STR$(P)
9560 NEXT K
9570 SPRITE 2, S$
9580 RETURN

9660 REM Sprite 3: Tintenfisch-Alien (32x32) - Authentisches Design
9670 LET S$ = ""
9680 FOR L = 1 TO 1024
9690   LET Y = INT((L - 1) / 32) + 1
9700   LET X = ((L - 1) MOD 32) + 1
9710   LET P = 0
9720   REM Tintenfisch-Kopf
9730   IF Y = 10 AND X >= 13 AND X <= 19 THEN LET P = 13
9740   IF Y = 11 AND X >= 11 AND X <= 21 THEN LET P = 13
9750   IF Y = 12 AND X >= 9 AND X <= 23 THEN LET P = 13
9760   IF Y = 13 AND X >= 8 AND X <= 24 THEN LET P = 13
9770   IF Y = 14 AND X >= 7 AND X <= 25 THEN LET P = 13
9780   IF Y = 15 AND X >= 7 AND X <= 25 THEN LET P = 13
9790   REM Augen
9800   IF Y = 13 AND ((X >= 11 AND X <= 12) OR (X >= 20 AND X <= 21)) THEN LET P = 0
9810   IF Y = 14 AND ((X >= 11 AND X <= 12) OR (X >= 20 AND X <= 21)) THEN LET P = 0
9820   REM Arme/Tentakel
9830   IF Y = 16 AND ((X >= 9 AND X <= 10) OR (X >= 14 AND X <= 18) OR (X >= 22 AND X <= 23)) THEN LET P = 13
9840   IF Y = 17 AND ((X = 8) OR (X = 11) OR (X = 15) OR (X = 17) OR (X = 21) OR (X = 24)) THEN LET P = 13
9850   IF Y = 18 AND ((X = 9) OR (X = 10) OR (X = 16) OR (X = 22) OR (X = 23)) THEN LET P = 13
9860   IF L > 1 THEN LET S$ = S$ + ","
9870   LET S$ = S$ + STR$(P)
9880 NEXT L
9890 SPRITE 3, S$
9900 RETURN

9910 REM Sprite 4: Spieler-Kanone (32x32) - Authentisches Design
9920 LET S$ = ""
9930 FOR M = 1 TO 1024
9940   LET Y = INT((M - 1) / 32) + 1
9950   LET X = ((M - 1) MOD 32) + 1
9960   LET P = 0
9970   REM Kanonen-Rohr
9980   IF Y = 14 AND X = 16 THEN LET P = 10
9990   IF Y = 15 AND X = 16 THEN LET P = 10
10000  IF Y = 16 AND X = 16 THEN LET P = 10
10010  REM Haupt-Körper der Kanone
10020  IF Y = 17 AND X >= 14 AND X <= 18 THEN LET P = 10
10030  IF Y = 18 AND X >= 13 AND X <= 19 THEN LET P = 10
10040  IF Y = 19 AND X >= 12 AND X <= 20 THEN LET P = 10
10050  IF Y = 20 AND X >= 11 AND X <= 21 THEN LET P = 10
10060  REM Basis der Kanone
10070  IF Y = 21 AND X >= 8 AND X <= 24 THEN LET P = 10
10080  IF Y = 22 AND X >= 6 AND X <= 26 THEN LET P = 10
10090  IF Y = 23 AND X >= 5 AND X <= 27 THEN LET P = 10
10100  IF M > 1 THEN LET S$ = S$ + ","
10110  LET S$ = S$ + STR$(P)
10120 NEXT M
10130 SPRITE 4, S$
10140 RETURN

10150 REM Sprite 5: UFO (32x32) - Authentisches Design  
10160 LET S$ = ""
10170 FOR N = 1 TO 1024
10180   LET Y = INT((N - 1) / 32) + 1
10190   LET X = ((N - 1) MOD 32) + 1
10200   LET P = 0
10210   REM UFO Oberteil
10220   IF Y = 11 AND X >= 12 AND X <= 20 THEN LET P = 12
10230   IF Y = 12 AND X >= 10 AND X <= 22 THEN LET P = 12
10240   IF Y = 13 AND X >= 8 AND X <= 24 THEN LET P = 12
10250   REM UFO Mittelteil mit Lichtern
10260   IF Y = 14 AND X >= 6 AND X <= 26 THEN LET P = 12
10270   IF Y = 15 AND X >= 4 AND X <= 28 THEN LET P = 12
10280   REM Lichter/Fenster
10290   IF Y = 14 AND ((X = 9) OR (X = 12) OR (X = 16) OR (X = 20) OR (X = 23)) THEN LET P = 0
10300   IF Y = 15 AND ((X = 7) OR (X = 11) OR (X = 15) OR (X = 17) OR (X = 21) OR (X = 25)) THEN LET P = 0
10310   REM UFO Unterteil
10320   IF Y = 16 AND X >= 8 AND X <= 24 THEN LET P = 12
10330   IF Y = 17 AND X >= 10 AND X <= 22 THEN LET P = 12
10340   IF N > 1 THEN LET S$ = S$ + ","
10350   LET S$ = S$ + STR$(P)
10360 NEXT N
10370 SPRITE 5, S$
10380 RETURN

10390 REM Sprite 6: Player Bullet (32x32) - Dünner Strahl
10400 LET S$ = ""
10410 FOR O = 1 TO 1024
10420   LET Y = INT((O - 1) / 32) + 1
10430   LET X = ((O - 1) MOD 32) + 1
10440   LET P = 0
10450   REM Dünner vertikaler Strahl
10460   IF X = 16 AND Y >= 6 AND Y <= 26 THEN LET P = 11
10470   IF O > 1 THEN LET S$ = S$ + ","
10480   LET S$ = S$ + STR$(P)
10490 NEXT O
10500 SPRITE 6, S$
10510 RETURN

10520 REM Sprite 7: Enemy Bullet (32x32) - Zickzack-Blitz
10530 LET S$ = ""
10540 FOR P = 1 TO 1024
10550   LET Y = INT((P - 1) / 32) + 1
10560   LET X = ((P - 1) MOD 32) + 1
10570   LET PIX = 0
10580   REM Zickzack-Muster wie im Original
10590   IF Y = 8 AND X = 16 THEN LET PIX = 12
10600   IF Y = 9 AND X = 15 THEN LET PIX = 12
10610   IF Y = 10 AND X = 14 THEN LET PIX = 12
10620   IF Y = 11 AND X = 15 THEN LET PIX = 12
10630   IF Y = 12 AND X = 16 THEN LET PIX = 12
10640   IF Y = 13 AND X = 17 THEN LET PIX = 12
10650   IF Y = 14 AND X = 18 THEN LET PIX = 12
10660   IF Y = 15 AND X = 17 THEN LET PIX = 12
10670   IF Y = 16 AND X = 16 THEN LET PIX = 12
10680   IF Y = 17 AND X = 15 THEN LET PIX = 12
10690   IF Y = 18 AND X = 14 THEN LET PIX = 12
10700   IF Y = 19 AND X = 15 THEN LET PIX = 12
10710   IF Y = 20 AND X = 16 THEN LET PIX = 12
10720   IF P > 1 THEN LET S$ = S$ + ","
10730   LET S$ = S$ + STR$(PIX)
10740 NEXT P
10750 SPRITE 7, S$
10760 RETURN

10770 REM Sprite 8: Wand-Block (32x32) - Feste Blöcke
10780 LET S$ = ""
10790 FOR Q = 1 TO 1024
10800   LET Y = INT((Q - 1) / 32) + 1
10810   LET X = ((Q - 1) MOD 32) + 1
10820   LET PIX = 0
10830   REM Kompakter 8x8 Block in der Mitte
10840   IF X >= 12 AND X <= 20 AND Y >= 12 AND Y <= 20 THEN LET PIX = 2
10850   IF Q > 1 THEN LET S$ = S$ + ","
10860   LET S$ = S$ + STR$(PIX)
10870 NEXT Q
10880 SPRITE 8, S$
10890 RETURN

REM =============================================
REM GAME OVER
REM =============================================

11000 REM Game Over
11010 CLS
11020 LOCATE 30, 12
11030 PRINT "GAME OVER"
11040 LOCATE 25, 15
11051 PRINT "FINAL SCORE: "; SCORE
11060 LOCATE 25, 18
11070 PRINT "Press ESC to quit"
11080 SAY "Game Over. Final score"
11090 SOUND 200, 1000
11100 FOR I = 1 TO 50
11110   NOISE 20, 10, 30
11120 NEXT I

11130 LET K$ = INKEY$
11140 IF K$ = CHR$(27) THEN GOTO 11200
11150 GOTO 11130

11200 END

REM =============================================
REM PARTIKELSYSTEM FÜR EXPLOSIONEN
REM =============================================

12000 REM Partikelsystem initialisieren
12010 REM Erstelle mehr Explosion Emitter für gleichzeitige Treffer
12020 REM Kurze Blitz-Explosionen (Minimum 0.1s wegen Backend-Limit)
12025 PARTICLE CREATE 1, circle, 120, 70, 0.1
12030 PARTICLE CREATE 2, star, 100, 65, 0.12
12035 PARTICLE CREATE 3, point, 140, 60, 0.1
12040 PARTICLE CREATE 4, circle, 110, 75, 0.15
12045 PARTICLE CREATE 5, star, 90, 55, 0.1
12050 PARTICLE CREATE 6, point, 130, 65, 0.12
12055 REM Sehr leichte Gravity für realistischen Explosionseffekt
12060 PARTICLE GRAVITY 15
12070 RETURN

12100 REM Alien Explosion starten (non-blocking)
12110 REM Finde ersten freien Emitter von 1-4 für Alien-Explosionen
12120 IF EXP1TIME = 0 THEN PARTICLE MOVE 1, EXPX, EXPY: LET EXP1TIME = 6: RETURN
12130 IF EXP2TIME = 0 THEN PARTICLE MOVE 2, EXPX, EXPY: LET EXP2TIME = 7: RETURN
12140 IF EXP3TIME = 0 THEN PARTICLE MOVE 3, EXPX, EXPY: LET EXP3TIME = 5: RETURN
12150 IF EXP4TIME = 0 THEN PARTICLE MOVE 4, EXPX, EXPY: LET EXP4TIME = 8: RETURN
12160 REM Alle Emitter belegt - überspringen
12170 RETURN

12200 REM UFO Explosion starten (non-blocking)
12210 REM Verwende Emitter 4-6 für spektakuläre UFO-Explosion
12220 IF EXP4TIME = 0 AND EXP5TIME = 0 AND EXP6TIME = 0 THEN GOTO 12230
12225 RETURN
12230 PARTICLE MOVE 4, EXPX, EXPY
12240 PARTICLE MOVE 5, EXPX - 15, EXPY + 8
12250 PARTICLE MOVE 6, EXPX + 15, EXPY - 8
12260 LET EXP4TIME = 8
12270 LET EXP5TIME = 6
12280 LET EXP6TIME = 7
12290 RETURN

12300 REM Explosion Timer Management (läuft jeden Frame)
12310 REM Emitter 1-6 Timer
12320 IF EXP1TIME > 0 THEN LET EXP1TIME = EXP1TIME - 1
12330 IF EXP1TIME = 1 THEN PARTICLE HIDE 1
12340 IF EXP2TIME > 0 THEN LET EXP2TIME = EXP2TIME - 1
12350 IF EXP2TIME = 1 THEN PARTICLE HIDE 2
12360 IF EXP3TIME > 0 THEN LET EXP3TIME = EXP3TIME - 1
12370 IF EXP3TIME = 1 THEN PARTICLE HIDE 3
12380 IF EXP4TIME > 0 THEN LET EXP4TIME = EXP4TIME - 1
12390 IF EXP4TIME = 1 THEN PARTICLE HIDE 4
12400 IF EXP5TIME > 0 THEN LET EXP5TIME = EXP5TIME - 1
12410 IF EXP5TIME = 1 THEN PARTICLE HIDE 5
12420 IF EXP6TIME > 0 THEN LET EXP6TIME = EXP6TIME - 1
12430 IF EXP6TIME = 1 THEN PARTICLE HIDE 6
12440 RETURN